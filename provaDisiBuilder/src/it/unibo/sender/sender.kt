
 /* Actor msg-based Generated by AN DISI Unibo */ 
package it.unibo.sender
import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class sender(name: String, scope: CoroutineScope) : ActorBasicFsm( name, scope ){
	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return {
				state("init") {
					action {
						println("sender | STARTS")
                        //forward a dispatch to itself
                        forward("msg1", "msg1(autoHello)" ,"sender" ) 
						//TODO 
					}
					transition( edgeName="goto",targetState="waitinput", cond=doswitch() )	 
				}
 				state("waitinput") {
					action {
                        stateTimer = TimerActor("timer_waitinput", 
                             scope, context!!, "local_tout_sender_waitinput", 1000.toLong() )
					}
                    transition(edgeName="t00",targetState="handleTimeOut", cond=whenTimeout("local_tout_sender_waitinput")) 
					transition(edgeName="t01",targetState="handleDispatch",cond=whenDispatch("msg1"))
					transition(edgeName="t02",targetState="handleRequest", cond=whenRequest("r1"))
					transition(edgeName="t03",targetState="handleAlarm",   cond=whenEvent("alarm"))
				}		
		
				state("handleDispatch") {    //this:State
					action {     //it:State
                        println("sender in handleDispatch")
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("msg1(ARG)"), Term.createTerm("msg1(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("sender msg1:msg1(${payloadArg(0)})")
								//delay(1000) 
						}
					}
					 transition( edgeName="goto",targetState="waitinput", cond=doswitch() )
				}	 

				state("handleRequest") { //this:State
					action { //it:State
						println("sender in handleRequest")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="waitinput", cond=doswitch() )
				}	 

				state("handleAlarm") { //this:State
					action { //it:State
						println("sender in handleAlarm")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 


                state("handleTimeOut") { 
					action { 
						println("sender TIME-OUT")
						terminate(0)
					}
				}	
				state("endOfWork") { 
					action { 
						println("sender BYE")
						terminate(0)
					}
				}	 			
			}
 
		}
}
