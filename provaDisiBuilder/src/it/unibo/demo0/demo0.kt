
/* System msg-driven Generated by AN DISI Unibo */
package it.unibo.demo0
import kotlinx.coroutines.*
import kotlinx.coroutines.channels.actor
import kotlinx.coroutines.channels.SendChannel

val cpus = Runtime.getRuntime().availableProcessors(); 

fun curThread() : String { 
	return "thread=${Thread.currentThread().name} / nthreads=${Thread.activeCount()}" 
}
    
var senderActor : SendChannel<String>?  = null

var receiverActor : SendChannel<String>?  = null

    
fun startsender( scope : CoroutineScope ){
	senderActor = scope.actor<String> {   
		println("senderActor STARTS")
        //OtherActor!!.send("hello from sender")        //TODO
        //OtherActor!!.send("end")                  //TODO
		var msg : String
		do{ 	//message-driven
            msg = channel.receive()
			println("senderActor receives: "+ msg)
		}while( msg != "end" )
        //OtherActor!!.send("end")       //TODO
		println("senderActor ENDS")
	}
}                

fun startreceiver( scope : CoroutineScope ){
	receiverActor = scope.actor<String> {   
		println("receiverActor STARTS")
        //OtherActor!!.send("hello from receiver")        //TODO
        //OtherActor!!.send("end")                  //TODO
		var msg : String
		do{ 	//message-driven
            msg = channel.receive()
			println("receiverActor receives: "+ msg)
		}while( msg != "end" )
        //OtherActor!!.send("end")       //TODO
		println("receiverActor ENDS")
	}
}                

    @kotlinx.coroutines.ObsoleteCoroutinesApi
@kotlinx.coroutines.ExperimentalCoroutinesApi
fun main() = runBlocking{
    println("demo0 BEGINS CPU=${cpus}"   )
 	
        startsender(this)

        startreceiver(this)

    println("ENDS ${curThread()}"   )
}   
