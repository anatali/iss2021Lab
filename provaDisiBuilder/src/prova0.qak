
/* Generated by AN DISI Unibo */
System prova0 
Dispatch msg1 : msg1(ARG)
Request r1    : r1(X)
Reply   a1    : a1(X) 
Event alarm   : alarm( KIND ) 

Context ctxprova0 ip [host="localhost" port=8095]

QActor prova0actor context ctxprova0{
	State s0 initial { 	 
        println("prova0actor STARTS") 
		//discardMsg On
 		//[# sysUtil.logMsgs=true #]
 	}     
 	Goto s1  
 	
    State s1{
  		println("demo in s1") 
 	}
 	Transition t0 whenTime 1000   -> handleTimeout
                  whenMsg msg1    -> handleDispatch
 				  whenRequest r1  -> handleRequest
                  whenEvent alarm -> handleAlarm

	State handleTimeout{
        printCurrentMessage
		println("prova0actor handleTimeout")  
	}

    State handleDispatch{
  		println("prova0actor in handleDispatch")  
 		printCurrentMessage   
 		onMsg( msg1:msg1(ARG) ){
 			println("prova0actor in s2 since msg1:msg1(${payloadArg(0)})")
 			delay 1000  
 		}
    }
    Goto s1  
    
    State handleRequest{
  		println("prova0actor in handleRequest")  
 		printCurrentMessage  
    } 
    Goto s1  
    
    State handleAlarm{
  		println("prova0actor in handleAlarm")  
 		printCurrentMessage  
    } 
    Goto s1  
    
 }
 
QActor msgproducer context ctxprova0{ 
	State s0 initial { 	 
        println("msgProducer STARTS") 
  	}     
 	Goto s1  
 	
    State s1{
  		println("msgProducer in s1") 
        forward prova0actor -m msg1 : msg1(1) 
 	}
}
