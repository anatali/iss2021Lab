/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    //id("org.jetbrains.kotlin.jvm") version "1.3.72"
    //id("org.jetbrains.kotlin.jvm") version "1.4.30-M1"
    //`kotlin-dsl`
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("unibo.disi.builder") version "1.0"

}
/*
repositories {
    //jcenter()
    //mavenCentral()
  }
*/

project.plugins.forEach() {
    println( it )
}

task("showClasspath")  {
    doLast {
        buildscript.configurations.forEach{ println( it.allArtifacts ) }
    }
}

task("mybuild"){
    doLast{
        val v = unibo.disi.builder.Generator.genCodeFromModel("demo0")
    }
}
task("hello"){
    doLast(){
        println("hello testBuilder")
    }
}


/*
dependencies {
    // Align versions of all Kotlin components
    implementation( platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:29.0-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}


application {
    // Define the main class for the application.
    mainClass.set("testBuilder.AppKt")
}
*/

/*
ADDED AFTER buildSrc

//val compileClasspath by configurations.creating

task<CommonTask>("ct"){
    println("................... ct " )
    actorModel="demo1"
}
*/



/*
//A LOCALLY DEFINED PLUGIN

open class DisiGenTask : DefaultTask() {
    @TaskAction
    fun buildActorCode() {
        println("DisiGenTask START")
        //generator.genCodeFromModel("demo0")
    }
}
tasks.register<DisiGenTask>("genactor")


task<DisiGenTask>("disiBuild"){
    println("................... disiBuild " )
    actorModel="demo0"

}*/
/*
//POWERSHELL JUST TO KNOWN ...
gradle properties |
    Where-Object { $_ -match '(?<=^plugins: \[).*(?=\])'; } |
    Out-Null;
$Matches.Values -split ", " |
    ForEach-Object { ($_ -split "@")[0]; }
 */