package unibo.disi.builder

object GeneratorQak {

fun genSkeleton( sysName: String ): String {
    //val packageName = dirName.replace("${generator.outSrcDir}/", "").replace("/", ".")
    val dollar    = "$"
    val actorName = "${sysName}actor"
    return """
/* Generated by AN DISI Unibo */
System $sysName 
Dispatch msg1 : msg1(ARG)
Request r1    : r1(X)
Reply   a1    : a1(X) 
Event alarm   : alarm( KIND ) 

Context ctx$sysName ip [host="localhost" port=8095]

QActor ${actorName} context ctx$sysName{
	State s0 initial { 	 
        println("${actorName} STARTS") 
		//discardMsg On
 		//[# sysUtil.logMsgs=true #]
 	}     
 	Goto s1  
 	
    State s1{
  		println("demo in s1") 
 	}
 	Transition t0 whenTime 1000   -> handleTimeout
                  whenMsg msg1    -> handleDispatch
 				  whenRequest r1  -> handleRequest
                  whenEvent alarm -> handleAlarm

	State handleTimeout{
        printCurrentMessage
		println("${actorName} handleTimeout")  
	}

    State handleDispatch{
  		println("${actorName} in handleDispatch")  
 		printCurrentMessage   
 		onMsg( msg1:msg1(ARG) ){
 			println("${actorName} in s2 since msg1:msg1($dollar{payloadArg(0)})")
 			delay 1000  
 		}
    }
    Goto s1  
    
    State handleRequest{
  		println("${actorName} in handleRequest")  
 		printCurrentMessage  
    } 
    Goto s1  
    
    State handleAlarm{
  		println("${actorName} in handleAlarm")  
 		printCurrentMessage  
    } 
    Goto s1  
    
 }
 
QActor msgproducer context ctx$sysName{ 
	State s0 initial { 	 
        println("msgProducer STARTS") 
  	}     
 	Goto s1  
 	
    State s1{
  		println("msgProducer in s1") 
        forward $actorName -m msg1 : msg1(1) 
 	}
}
"""
  }

  fun genQak( dirPath: String, sysName: String ){
    //val dirPath = "C:/xxx"
    val currentDir = System.getProperty("user.dir")
    val projectPath    = "$dirPath"     //  /$sysName
    val sourcePath     = "$projectPath/src"
    val projectDirName = genUtils.genDirectory(sourcePath).toString()
      //GRADLE
      genUtils.genFileDir( projectPath,  "",  "build" , "gradle", builtin.genGradleRules(sysName) )

      //ACTOR
      val actorfName = "${sourcePath}/${sysName}.qak"
      genUtils.writeOnFile( actorfName, genSkeleton( sysName ) )

      println(" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EXEC gradle eclipse $currentDir")
      //CLASSPATH and PROJECT for the eclipse project are generated by the plugin eclipse
      //Runtime.getRuntime().exec("cmd.exe /c cd $projectPath")
      //Runtime.getRuntime().exec( "cmd.exe /c echo hello world >> www.txt" )
      Runtime.getRuntime().exec( "cmd.exe /c gradle eclipse >> eclipsecmdlog.txt" )

  }
}