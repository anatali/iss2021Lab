package unibo.disi.builder

object GeneratorQak {

fun genSkeleton( actorName: String ): String {
    //val packageName = dirName.replace("${generator.outSrcDir}/", "").replace("/", ".")
    val dollar = "$"
    return """
/* Generated by AN DISI Unibo */
System demoqak 
Dispatch msg1 : msg1(ARG)
Request r1    : r1(X)
Reply   a1    : a1(X) 
Event alarm   : alarm( KIND ) 

Context ctxdemooqak ip [host="localhost" port=8095]

QActor $actorName context ctxdemooqak{
	State s0 initial { 	 
        println("demoActor STARTS") 
		//discardMsg On
 		//[# sysUtil.logMsgs=true #]
 	}     
 	Goto s1  
 	
    State s1{
  		println("demo in s1") 
 	}
 	Transition t0 whenMsg msg1    -> handleDispatch
 				  whenRequest r1  -> handleRequest
                  whenEvent alarm -> handleAlarm

    State handleDispatch{
  		println("demo in handleDispatch")  
 		printCurrentMessage   
 		onMsg( msg1:msg1(ARG) ){
 			println("demo in s2 since msg1:msg1($dollar{payloadArg(0)})")
 			delay 1000  
 		}
    }
    Goto s1  
    
    State handleRequest{
  		println("demo in handleRequest")  
 		printCurrentMessage  
    } 
    Goto s1  
    
    State handleAlarm{
  		println("demo in handleAlarm")  
 		printCurrentMessage  
    } 
    Goto s1  
    
 }
 
QActor msgproducer context ctxdemooqak{ 
	State s0 initial { 	 
        println("msgProducer STARTS") 
  	}     
 	Goto s1  
 	
    State s1{
  		println("msgProducer in s1") 
        forward $actorName -m msg1 : msg1(1) 
 	}
}
"""
  }

  fun genQak( dirName: String, sysactorName: String ){
    val myDirName = "C:/tmp/xxx/src"
    val projectDirName = genUtils.genDirectory(myDirName).toString()

    val actorfName = "${myDirName}/${sysactorName}.qak"
    println( "generatorQak | genQak actorfName=$actorfName"  )
    val actorf     = java.io.File( actorfName )
    if( actorf.exists() ) return
    var content = genSkeleton( sysactorName )
    actorf.writeText( content )
  }
}