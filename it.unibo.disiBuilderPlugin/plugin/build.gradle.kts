/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.72"
    `maven-publish`    //ADDED TO PUBLISH
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    flatDir {dirs( "../../unibolibs")}   //ADDED TO ACCESS to the TuProlog library
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    implementation( "tuprolog:2p301" )  //ADDED TO USE the TuProlog library
}

//CHANGED
/*
gradlePlugin {
    // Define the plugin
    plugins {
        create("builder") {
            id = "unibo.disi.builder"
            implementationClass = "it.unibo.disiBuilderPlugin.DisiBuilderPlugin"
        }
    }
}*/


//CHANGED : another version
gradlePlugin {
    // Define the plugin
    val builder by plugins.creating {
        id = "unibo.disi.builder"
        implementationClass = "it.unibo.disiBuilderPlugin.DisiBuilderPlugin"
    }
}


// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

gradlePlugin.testSourceSets(functionalTestSourceSet)
configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
}

tasks.check {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

/*
------------------------------------------------------
ADDED: publishing part
------------------------------------------------------
 */
group = "unibo.disi"
version = "1.0"

publishing {
    repositories {
        maven {
            url = uri("../../uniboRepos/maven-repo")
        }
    }
}