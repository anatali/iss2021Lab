package disi.builder

import java.io.File
import java.io.FileOutputStream
import java.io.OutputStreamWriter
import alice.tuprolog.*

object genUtils {
	fun test() {
		println("Hello from Utils.kt")
	}

fun genFileName( dir: String,  packageName: String,  name: String,  suffix:String ) : String {
   val sysName  = packageName.replace(".", "/")
   var fName    = ""
   var afterDot = ""
	 if( suffix.length > 0  ) afterDot = "." + suffix
	 if( sysName.length > 0 ) fName   = dir+"/"+sysName + "/" + name + afterDot
	 else fName   = dir+"/"+ name + afterDot
     //println(" +++ generate " + fName)
	 return fName
}
/*
 genFileDir
*/	
 fun genFileDir( dir: String,  packageName: String,  name: String,  suffix:String ,  contents: String){
	val fName    = genFileName(dir, packageName, name, suffix )
	val fa       = java.io.File( fName )
	fa.writeText(contents)	  
}
	
	
	fun copyFile(dir: String,  packageName: String,  name: String,  suffix:String){
		val sourcefName    = genFileName(dir, packageName, name, suffix )
		val fsource        = java.io.File( sourcefName )
		println( sourcefName )
		val contents = fsource.readText()
		
		val destfName      = genFileName("./src-gen",  "", name, suffix )
		println( destfName )
		val fdest          = java.io.File( destfName )
		fdest.writeText(contents)
	}	

}//Object Utils

object generator{
	
    val pengine     = Prolog() 
	val outSrcDir   = "./src-gen"
	
	fun genSysRules(){
		genUtils.genFileDir( outSrcDir,  "",  "sysRules" , "pl", builtin.sysRules )
		//println( genUtils.genFileName("./src",  "disi/kb",  "sysRules" , "pl")  )
		//println( genUtils.genFileName("./src.gen",  "",  "sysRules" , "pl")  )
		//genUtils.copyFile(  "./src",  "disi/kb",  "sysRules" , "pl"  )		
	}
 
	  fun genCtxDirName(ctxName: String) : String{
		  return "$outSrcDir/it/unibo/$ctxName"
	  }
	
	  fun genMainCtxFile( ctxName: String, content: String ) {
	      try {
			  //generate a new directory
			    val dirName = genCtxDirName(ctxName)
				val folder  = File(dirName)
		        folder.mkdirs()
			    val mainfName = "$dirName/Main_${ctxName}.kt"
		        val mainf     = java.io.File( mainfName ) 
		        mainf.writeText( content )		//writeText creates the file
			    println("generator | done $mainfName")  
	      }
	      catch (e: Exception) {
	         e.printStackTrace()
	      }
	  } 

	fun genCtxMainContent(dirName : String, modelFileName: String ) : String{
		val packageName = dirName.replace("$outSrcDir/","").replace("/",".")
		return """
/* Generated by AN DISI Unibo */
package $packageName
import it.unibo.kactor.QakContext
import it.unibo.kactor.sysUtil
import kotlinx.coroutines.runBlocking

fun main() = runBlocking {
	QakContext.createContexts( "localhost", this, "$modelFileName.pl", "sysRules.pl" )
}
"""
	}
	
	fun genCtxMain(modelFileName : String ) : String{
		val sol = pengine.solve("ctx(NAME,HOST,PROTOCOL,PORT)." )
		if(  sol.isSuccess  ) {
			val ctxName = sol.getVarValue("NAME").toString()
			val ctxHost = sol.getVarValue("HOST").toString()
			//val ctxPort = sol.getVarValue("PORT").toString()
			println("ctxName=${ctxName} ctxHost=${ctxHost}")
			val content = genCtxMainContent( genCtxDirName(ctxName) , modelFileName )
			genMainCtxFile(ctxName,content)
			return ctxName
		}
 		else{ println("generator | ctx not found"); return "" }
	}

	fun genActorCode(ctxName : String ){
		val sol = pengine.solve("getActorNames(ACTORS,$ctxName)" )
		if(  sol.isSuccess  ) {
			val actorNames = sol.getVarValue("ACTORS") 
 			println( "generator | ${actorNames}")
		}else println("generator | genActorCode ERROR")
	}
			
	fun genCodeFromModel(modelFileName : String){
		println("generator | START")
		genSysRules()
		pengine.solve("consult('$modelFileName.pl')." )  
		pengine.solve("consult( '$outSrcDir/sysRules.pl' )." )
		
		val ctxName = genCtxMain(modelFileName)
		genActorCode( ctxName )
		println("generator | END")
	}
	

	
}//Object generator

	fun main() {	//args: Array<String>?
		//Utils.test()
		val path = System.getProperty("user.dir")
		println("path=:$path"  );
		
		generator.genCodeFromModel("demo0")

	}