package disi.builder

import java.io.File
import java.io.FileOutputStream
import java.io.OutputStreamWriter
import alice.tuprolog.*

object genUtils {
	fun test() {
		println("Hello from Utils.kt")
	}

fun genFileName( dir: String,  packageName: String,  name: String,  suffix:String ) : String {
   val sysName  = packageName.replace(".", "/")
   var fName    = ""
   var afterDot = ""
	 if( suffix.length > 0  ) afterDot = "." + suffix
	 if( sysName.length > 0 ) fName   = dir+"/"+sysName + "/" + name + afterDot
	 else fName   = dir+"/"+ name + afterDot
     //println(" +++ generate " + fName)
	 return fName
}
/*
 genFileDir
*/	
 fun genFileDir( dir: String,  packageName: String,  name: String,  suffix:String ,  contents: String){
	val fName    = genFileName(dir, packageName, name, suffix )
	val fa       = java.io.File( fName )
	fa.writeText(contents)	  
}
	
	
	fun copyFile(dir: String,  packageName: String,  name: String,  suffix:String){
		val sourcefName    = genFileName(dir, packageName, name, suffix )
		val fsource        = java.io.File( sourcefName )
		println( sourcefName )
		val contents = fsource.readText()
		
		val destfName      = genFileName("./src-gen",  "", name, suffix )
		println( destfName )
		val fdest          = java.io.File( destfName )
		fdest.writeText(contents)
	}	

	
	fun strRepToList( lr: String ) : List<String>{
		return lr.replace("[","").replace("]","").split(",")
	}
}//Object genUtils




object generator{
	
    val pengine     = Prolog() 
	val outSrcDir   = "./src-gen"
	val packagelogo = "it/unibo"
	
	fun genSysRules(){
		genUtils.genFileDir( outSrcDir,  "",  "sysRules" , "pl", builtin.sysRules )
	}
 
	  fun genFilePathName(fName: String) : String{
		  return "$outSrcDir/$packagelogo/$fName"
	  }
	
/*
 Generate the code for the contexts
*/ 				
	  fun genMainCtxFile( ctxName: String, content: String ) {
	      try {
			  //generate a new directory
			    val dirName = genFilePathName(ctxName)
				val folder  = File(dirName)
		        folder.mkdirs()
			    val mainfName = "$dirName/Main_${ctxName}.kt"
			    println( "generator | agenMainCtxFile mainfName=$mainfName"  )
		        val mainf     = java.io.File( mainfName ) 
		        mainf.writeText( content )		//writeText creates the file
			    println("generator | done $mainfName")  
	      }
	      catch (e: Exception) {
	         e.printStackTrace()
	      }
	  } 

	fun genCtxMainContent(dirName : String, modelFileName: String ) : String{
		val packageName = dirName.replace("$outSrcDir/","").replace("/",".")
		return """
/* Generated by AN DISI Unibo */
package $packageName
import it.unibo.kactor.QakContext
import it.unibo.kactor.sysUtil
import kotlinx.coroutines.runBlocking

fun main() = runBlocking {
	QakContext.createContexts( "localhost", this, "$modelFileName.pl", "sysRules.pl" )
}
"""
	}
	
	
	fun genCtxMain(modelFileName : String ) : String{
		val sol = pengine.solve("ctx(NAME,HOST,PROTOCOL,PORT)." )
		if(  sol.isSuccess  ) {
			val ctxName = sol.getVarValue("NAME").toString()
			val ctxHost = sol.getVarValue("HOST").toString()
			//val ctxPort = sol.getVarValue("PORT").toString()
			println("ctxName=${ctxName} ctxHost=${ctxHost}")
			val content = genCtxMainContent( genFilePathName(ctxName) , modelFileName )
			genMainCtxFile(ctxName,content)
			return ctxName
		}
 		else{ println("generator | ctx not found"); return "" }
	}

/*
 Generate the code for the actors
*/ 		
	fun genActorCodeContent( actorName: String) : String{
		val packageName =  "$packagelogo/$actorName" 
		return """
 /* Generated by AN DISI Unibo */ 
package $packageName
import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class $actorName(name: String, scope: CoroutineScope) : ActorBasicFsm( name, scope ){
	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$actorName | STARTS")
						//TODO 
					}
				}	 
			}
		}
}
"""		
	}
	
	fun genCodeActorFile( filePathName: String, actorName : String ){
		println( "generator | genCodeActorFile actorName=$actorName filePathName=$filePathName")
			  //generate a new directory
			    val dirName = genFilePathName(actorName)
				val folder  = File(dirName)
		        folder.mkdirs()
		val actorfName = "$dirName/${actorName}.kt"
		println( "generator | actorfName=$actorfName"  )
 		val actorf     = java.io.File( actorfName )
		val content    = genActorCodeContent( actorName )
		//actorf.writeText( content )		 
		println("generator | done $actorName")  
		
	}
	
	fun genActorsCode(ctxName : String ){
		val sol = pengine.solve("getActorNames(ACTORS,$ctxName)." )
		if(  sol.isSuccess  ) {
			val actorNames     = sol.getVarValue("ACTORS") //List
			val actorNamesList = genUtils.strRepToList(actorNames.toString())  
			actorNamesList.forEach{ v -> genCodeActorFile( genFilePathName(v), v) } 			
		}else println("generator | genActorsCode ERROR")
	}

	
/*
Generate the Kotlin code given a system model written in Prolog
*/				
	fun genCodeFromModel(modelFileName : String){
		println("generator | START")
		genSysRules()
		pengine.solve("consult('$modelFileName.pl')." )  
		pengine.solve("consult( '$outSrcDir/sysRules.pl' )." )
		
		val ctxName = genCtxMain( modelFileName )
		genActorsCode( ctxName )
		println("generator | END")
	}
	

	
}//Object generator

	fun main() {	//args: Array<String>?
		//Utils.test()
		val path = System.getProperty("user.dir")
		println("path=:$path"  );
		
		generator.genCodeFromModel("demo0")

	}