
/* Actor msg-driven Generated by AN DISI Unibo */
package it.unibo.demo
import kotlinx.coroutines.*
import kotlinx.coroutines.channels.actor
import kotlinx.coroutines.channels.SendChannel

var senderActor   : SendChannel<String>?  = null
var receiverActor : SendChannel<String>?  = null
val cpus = Runtime.getRuntime().availableProcessors(); 

fun curThread() : String { 
	return "thread=main / nthreads=1" 
}
               
fun startReceiver( scope : CoroutineScope ){
	receiverActor = scope.actor<String> {   
		println("receiverActor STARTS")
		var msg = channel.receive()
		while( msg != "end" ){ 	//message-driven
			println("receiverActor receives "+ msg)
			msg = channel.receive()
		}
		println("receiverActor ENDS")
	}
}
 
fun startSender( scope : CoroutineScope){
	senderActor = scope.actor {  
		//actor is a coroutine builder (dual of produce)
		println("senderActor   STARTS")
 		receiverActor!!.send("Hello1")
		delay(250)
 		receiverActor!!.send("Hello2")
		delay(250)
		receiverActor!!.send("end")
		println("senderActor   ENDS")
 	}
} 

@kotlinx.coroutines.ObsoleteCoroutinesApi
@kotlinx.coroutines.ExperimentalCoroutinesApi

fun main() = runBlocking{
    println("BEGINS CPU=" + cpus  )
 	startReceiver( this )
	startSender( this )
    println("ENDS " + curThread() )
}
