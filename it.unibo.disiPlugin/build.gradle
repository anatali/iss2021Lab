/*
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'
}



repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
*/

//https://docs.gradle.org/current/userguide/publishing_customization.html
//https://plugins.gradle.org/docs/publish-plugin
plugins {
    id 'java-gradle-plugin'
    /*
    This plugin will automatically apply the Java Plugin,
    add the gradleApi() dependency to the api configuration,
    generate the required plugin descriptors in the resulting JAR file
    and configure the Plugin Marker Artifact to be used when publishing.
     */
    //id 'java'
    //id 'java-library'
    id 'maven-publish'
    //id("com.gradle.plugin-publish") version "0.12.0"
    //id 'org.jetbrains.kotlin.jvm' version '1.4.20'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    //id 'maven'
}

repositories {
    mavenCentral()
    jcenter()
}

println(" ...... build in it.unibo.disiPlugin buildDir=$buildDir  ")
sourceCompatibility = 1.8

gradlePlugin {
    plugins {
        /*
        create("greetingsPlugin") {
            id = "unibo.disi.buildplugin"
            implementationClass = "unibo.disi.plugins.MyPlugin"
        }*/

        disiPlugin {
            id = 'unibo.disiPlugin'
            implementationClass = 'unibo.disi.plugins.MyPlugin'
        }
    }
}

group 'unibo.disi'
version '1.0'

/*
If you are publishing your plugin internally for use within your organization,
you can publish it like any other code artifact.
See the Ivy and Maven chapters on publishing artifacts.


By default, the publishing plugin will use the project group, prefixed with gradle.plugin
as the maven coordinate group for your plugin.
For example, if your project has group com.foo, the maven coordinate group of the plugin
will be gradle.plugin.com.foo. (gradle.plugin.it.unibo.disiPlugin)

CALL publishToMavenLocal  => C:\Users\anatali\.m2\repository
 */

publishing {

    publications {
        DisiBuilder(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'disiRepo'
            //url = "file://${buildDir}/repo"
            url = "file://C:/tmp/repo"

        }
    }
}

dependencies {
    // No need to add gradleApi() here, because it is applied by the 'java-gradle-plugin' plug-in

    // We want to merge and parse SpotBugs xml files with XSLT
    //compile('net.sf.saxon:Saxon-HE:9.8.0-12')
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

wrapper {
    gradleVersion = '6.7.1'
}



//Deprecated
/*
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://localhost/tmp/disiRepo/")
            //repository(url: uri('../repo'))
        }
    }
}
*/



